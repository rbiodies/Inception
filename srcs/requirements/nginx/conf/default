# server {

# 	listen 80;
# 	listen [::]:80;
# 	server_name inception;
# 	return 301 https://$host$request_uri;

# }

server {
	# данный элемент просит Nginx прослушивать порт 80
    listen 443 ssl;
    listen [::]:443 ssl;

# этот элемент определяет имя вашего сервера и серверный блок, 
# которые должны использоваться для запросов к вашему серверу
    server_name rbiodies.42.fr;

    ssl_certificate_key /etc/ssl/private/nginx.key;
    ssl_certificate /etc/ssl/certs/nginx.crt;
    ssl_protocols TLSv1.2 TLSv1.3;
    
	# директива index определяет файлы, 
	# которые будут использоваться в качестве индексов при обработке запросов к вашему серверу
    index index.php index.html index.htm;
	# наша директива root назначает имя корневой директории для запросов к нашему серверу. 
	# Эта директория, /var/www/html/wordpress, 
	# создается в качестве точки монтирования в момент сборки с помощью инструкций в Dockerfile WordPress. 
	# Эти инструкции Dockerfile также гарантируют, что файлы релиза WordPress монтируются в этот том
    root /var/www/html/wordpress;
	# root /var/www/html;

# в этом блоке расположения мы будем использовать директиву try_files для проверки файлов, 
# соответствующих отдельным запросам URI. Вместо того, чтобы возвращать по умолчанию статус 404 не найдено, 
# мы будем передавать контроль файлу index.php Wordpress с аргументами запроса
    location / {
		# autoindex on;
        try_files $uri $uri/ /index.php$is_args$args;
    }
	# этот блок расположения будет обрабатывать PHP-запросы и проксировать эти запросы в наш контейнер wordpress. 
	# Поскольку наш образ WordPress Docker будет опираться на образ php:fpm, 
	# мы также добавим параметры конфигурации, принадлежащие протоколу FastCGI, в этот блок. 
	# Nginx требует наличия независимого процессора PHP для запросов PHP: 
	# в нашем случае эти запросы будут обрабатываться процессором php-fpm, который будет включать образ php:fpm. 
	# Кроме того, этот блок расположения содержит директивы FastCGI, переменные и опции, 
	# которые будут проксировать запросы для приложения WordPress, запущенного в нашем контейнере wordpress, 
	# задавать предпочитаемый индекс захваченного URI запроса, а также выполнять парсинг URI-запросов
    location ~ [^/]\.php(/|$) { 
            try_files $uri =404;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass wordpress:9000;
            fastcgi_index index.php;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PATH_INFO $fastcgi_path_info;
        }
}