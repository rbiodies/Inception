# Файл docker-compose должен начинаться с тега версии.
# Мы используем "3.9" так как это - самая свежая версия на момент написания
version: '3.9'

# Следует учитывать, что docker-composes работает с сервисами.
# 1 сервис = 1 контейнер.
# Сервисом может быть система управления контентом, сервер, сервер баз данных...
# Раздел, в котором будут описаны сервисы, начинается с 'services'
services:
  mariadb:
  # данный элемент указывает имя контейнера
    container_name: mariadb
    # Ключевое слово "build" позволяет задать
    # путь к файлу Dockerfile, который нужно использовать для создания образа,
    # который позволит запустить сервис.
    # Здесь './requirements/mariadb' соответствует пути к папке mariadb,
    # которая содержит соответствующий Dockerfile
    build: ./requirements/mariadb
    # данный параметр определяет политику перезапуска контейнера
    restart: always
    # этот параметр указывает Compose, что мы хотим добавить переменные среды из файла с именем .env, 
    # расположенного в контексте сборки. 
    # В этом случае в качестве контекста сборки используется наша текущая директория
    env_file: .env
    # здесь мы монтируем именованный том с названием db в директорию /var/lib/mysql в контейнере. 
    # Это стандартная директория данных в большинстве дистрибутивов
    volumes:
      - db:/var/lib/mysql
    # данный параметр указывает, что служба приложения будет подключаться к сети project, 
    # которую мы определим внизу файла
    networks:
      - project

  wordpress:
    container_name: wordpress
    build: ./requirements/wordpress
    env_file: .env
    # мы монтируем том с именем wordpress на точку монтирования /var/www/html/wordpress, 
    # созданную образом WordPress. 
    # Использование тома с именем таким образом позволит разделить наш код приложения с другими контейнерами
    volumes:
      - wp:/var/www/html/wordpress
      # - wp:/var/www/html
      # мы добавляем контейнер wordpress в сеть project
    networks:
      - project
  # этот параметр гарантирует, что наши контейнеры будут запускаться в порядке зависимости, 
  # и контейнер wordpress запускается после контейнера mariadb. 
  # Наше приложение WordPress зависит от наличия базы данных приложения и пользователя, 
  # поэтому установка такого порядка зависимостей позволит выполнять запуск приложения корректно
    depends_on:
      - mariadb

  nginx:
    container_name: nginx
    build: ./requirements/nginx
    hostname: localhost
    volumes:
      - wp:/var/www/html/wordpress
      # - wp:/var/www/html
    networks:
      - project
    depends_on:
      - wordpress
    # Вспомните о том, что в качестве порта в 'nginx' указан порт 443.
    # Если мы хотим обратиться к серверу с нашего компьютера (находясь за пределами контейнера),
    # мы должны организовать перенаправление этого порта на порт компьютера.
    # Сделать это нам поможет ключевое слово 'ports'.
    # При его использовании применяется следующая конструкция: [порт компьютера]:[порт контейнера]
    # В нашем случае нужно использовать порт компьютера 443 и организовать его связь с портом
    # 443 контейнера (так как именно на этот порт сервер 
    # ожидает поступления запросов).
    ports:
      - "443:443"

  redis:
    build: requirements/bonus/redis
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - project
    restart: always

  ftp-server:
    build: requirements/bonus/ftp-server
    container_name: ftp-server
    ports:
      - "21:21"
      - "21100-21110:21100-21110"
    volumes:
      - wp:/var/www/html/wordpress
      # - wp:/var/www/html
    networks:
     - project
    restart: always
    environment:
      FTP_USR: ${FTP_USR}
      FTP_PWD: ${FTP_PWD}

  portainer:
  # image указывает образ, с которого будет запускаться контейнер
    image: portainer/portainer-ce:latest
    container_name: portainer
    #  UI over port 9443 and expose a TCP tunnel server over port 8000
    ports:
      - "8000:8000"
      - "9443:9443"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      # это сокет Unix, который демон Docker прослушивает по умолчанию, 
      # и его можно использовать для связи с демоном из контейнера
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      # Отключить процессы-контейнеры от получения новых привилегий
      # Это означает, что команды, повышающие привилегии, такие как suили sudo, больше не будут работать
    security_opt:
      - no-new-privileges:true
    restart: always

# Наш ключ верхнего уровня volumes определяет тома db и wp. 
# Когда Docker создает тома, содержимое тома сохраняется в директории файловой системы хоста, 
# /var/lib/docker/volumes/, а данным процессом управляет Docker. 
# После этого содержимое каждого тома монтируется из этой директории в любой контейнер, использующий том. 
# Таким образом мы можем делиться кодом и данными между контейнерами
volumes:
  db:
    name: db
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/${USER}/data/db
  wp:
    name: wp
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/${USER}/data/wp

# Создаваемая пользователем мостовая система project позволяет организовать коммуникацию между нашими контейнерами,
# поскольку они находятся на одном хосте демона Docker.
# Это позволяет организовать трафик и коммуникации внутри приложения, 
# поскольку она открывает все порты между контейнерами в одной мостовой сети, скрывая все порты от внешнего мира. 
# Таким образом, наши контейнеры mariadb, wordpress и nginx могут взаимодействовать друг с другом, 
# и нам нужно будет только открыть порт 440 для внешнего доступа к приложению
networks:
  project:
    driver: bridge